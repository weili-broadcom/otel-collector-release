<%=
def config
  @config ||= begin
    cfg = retrieve_property('config')
    secrets = retrieve_property('secrets').to_h { |x| [x['name'], { 'cert' => x['cert'], 'key' => x['key'], 'ca' => x['ca'], 'secret' => x['secret'] }] }
    used_secrets = {}
    interpolate_secrets!(cfg, secrets, used_secrets)
    check_for_unused_secrets!(secrets, used_secrets)
    cfg = handle_old_properties(cfg) if cfg.empty? && p('prom_exporter_config').empty?
    cfg
  end
end

def interpolate_secrets!(cfg, secrets, used_secrets)
  if cfg.is_a? String
    match = cfg.match(/{{[^\S\r\n]*\.([\w\-]+)\.([\w\-]+)[^\S\r\n]*}}/)
    unless match.nil?
      secret_name = match[1]
      secret_type = match[2]
      secret_value = secrets.dig(secret_name, secret_type)
      unless secret_value.nil? || secret_value.empty?
        cfg = secret_value
        used_secrets["#{secret_name}.#{secret_type}"] = true
      end
    end
  elsif cfg.is_a? Array
    cfg.map! { |elem| interpolate_secrets!(elem, secrets, used_secrets) }
  elsif cfg.is_a? Hash
    cfg.keys.each { |key| cfg[key] = interpolate_secrets!(cfg[key], secrets, used_secrets) }
  end

  cfg
end

def check_for_unused_secrets!(secrets, used_secrets)
  unused_secrets = []
  secrets.each do |name, hash|
    hash.each do |type, value|
      search_str = "#{name}.#{type}"
      unused_secrets.push search_str unless value.nil? || value.empty? || !used_secrets[search_str].nil?
    end
  end
  raise "The following secrets are unused: ['#{unused_secrets.join("', '")}']" unless unused_secrets.empty?
end

def check_for_new_and_old_properties!
  both_provided = (!p('config').empty? || !p('prom_exporter_config').empty?) && (!p('metric_exporters').empty? || !p('trace_exporters').empty?)
  return unless both_provided

  raise "Can not provide 'config' property when deprecated 'metric_exporters' or 'trace_exporters' properties are provided"
end

def retrieve_property(name)
  if p(name).respond_to?(:each)
    p(name)
  else
    YAML.safe_load(p(name))
  end
end

def handle_old_properties(cfg)
  metric_exporters = retrieve_property('metric_exporters')
  trace_exporters = retrieve_property('trace_exporters')
  raise 'Exporter names must be unique' unless (trace_exporters.keys - metric_exporters.keys) == trace_exporters.keys

  cfg['exporters'] = metric_exporters.merge(trace_exporters)
  cfg['service'] = { 'pipelines' => {} }

  if metric_exporters.any?
    cfg['service']['pipelines']['metrics'] = {
        'receivers' => ['otlp/cf-local'],
        'exporters' => metric_exporters.keys
      }
  end

  if trace_exporters.any?
    cfg['service']['pipelines']['traces'] = {
        'receivers' => ['otlp/cf-local'],
        'exporters' => trace_exporters.keys
      }
  end

  cfg
end

def check_for_no_exporters!
  raise 'Exporter configuration must be provided' unless config['exporters']
end

def check_for_no_service_config!
  raise 'Service configuration must be provided' unless config['service']
end

def check_for_use_of_reserved_prefix!
  %w[exporters processors].each do |component|
    if config[component] && config[component].keys.any? { |k| k.include?('/cf-internal') }
      raise "#{component.capitalize} cannot be defined under cf-internal namespace"
    end
  end
end

def check_for_use_of_reserved_bbs_api_port!
  if config['exporters'] && config['exporters'].any? do |k, v|
       k.start_with?('prometheus/') && v['endpoint'] && v['endpoint'].end_with?(':8889')
     end
    raise 'Cannot define prometheus exporter listening on port 8889 (reserved for BBS API port)'
  end
end

def set_internal_receiver_as_only_receiver
  config['receivers'] = {
    'otlp/cf-internal-local' => {
      'protocols' => {
        'grpc' => {
          'endpoint' => "#{p('ingress.grpc.address')}:#{p('ingress.grpc.port')}",
          'tls' => {
            'client_ca_file' => '/var/vcap/jobs/otel-collector/config/certs/otel-collector-ca.crt',
            'cert_file' => '/var/vcap/jobs/otel-collector/config/certs/otel-collector.crt',
            'key_file' => '/var/vcap/jobs/otel-collector/config/certs/otel-collector.key',
            'min_version' => '1.3'
          }
        }
      }
    }
  }
end

def set_internal_receiver_on_all_pipelines
  config['service']['pipelines'].each_value do |pipeline|
    pipeline['receivers'] = ['otlp/cf-internal-local']
  end
end

def add_nop_pipelines
  ['traces', 'metrics', 'logs'].each do |signal|
    unless config['service']['pipelines'].keys.any? { |k| k.start_with?(signal) }
      config['service']['pipelines'][signal] = {
        'receivers' => nil,
        'processors' => nil,
        'exporters' => ['nop']
      }
      config['exporters']['nop'] = nil
    end
  end
end

def expose_internal_telemetry
  config['service']['telemetry'] = {
    'metrics' => {
      'address' => "127.0.0.1:#{p('telemetry.metrics.port')}",
      'level' => p('telemetry.metrics.level')
    }
  }
end

# Hardcoded list of exporters included in this otelcol distribution at `src/otel-collector-builder/config.yaml`
def included_exporters
  %w[otlp file prometheus prometheusremotewrite nop splunk_hec].sort
end

# Hardcoded list of processors included in this otelcol distribution at `src/otel-collector-builder/config.yaml`
def included_processors
  %w[batch memory_limiter transform filter].sort
end

# Hardcoded list of extensions included in this otelcol distribution at `src/otel-collector-builder/config.yaml`
def included_extensions
  %w[pprof].sort
end

def check_for_use_of_valid_components!(component_kind, included_components)
  user_components = config.fetch(component_kind, {}).map {|key, _| key.split('/')[0]}

  unrecognized_user_components = user_components - included_components
  raise "The following configured #{component_kind} are not included in this OpenTelemetry Collector distribution: #{unrecognized_user_components}. Available: #{included_components}." unless unrecognized_user_components.empty?
end

def check_for_use_of_allowed_components!(component_kind, included_components, allowed_components)
  if allowed_components.is_a? String
    return if allowed_components.empty?
    allowed_components = YAML.safe_load(allowed_components)
  end

  user_components = config.fetch(component_kind, {}).map {|key, _| key.split('/')[0]}

  unrecognized_allowed_components = allowed_components - included_components
  raise "The following #{component_kind} specified in the allow list are not included in this OpenTelemetry Collector distribution: #{unrecognized_allowed_components}. Available: #{included_components}." unless unrecognized_allowed_components.empty?

  disallowed_components = user_components - allowed_components
  raise "The following configured #{component_kind} are not allowed: #{disallowed_components}. Allowed: #{allowed_components}." unless disallowed_components.empty?
end

def set_default_prom_exporter!
  prom_exporter_config = retrieve_property('prom_exporter_config')

  name, content = prom_exporter_config.first

  # Validate the prometheus exporter name
  unless name.split('/')[0] == "prometheus"
    raise "Prometheus exporter name must be prefixed with 'prometheus', got: #{name}"
  end

  # Validate the prometheus exporter endpoint
  endpoint = content['endpoint']
  if endpoint.nil?
    raise "Prometheus exporter configuration is missing required 'endpoint' field"
  end

  # Extract the port from the endpoint
  if endpoint.include?(":")
    port = ":" + endpoint.split(":").last
  else
    raise("Endpoint #{endpoint} does not contain a port")
  end

  # Check if same port endpoint is already configured
  exporter_names = []
  if config['exporters'] && config['exporters'].any?
    config['exporters'].each do |exporter_name, exporter_config|
      if exporter_name.split('/')[0] == "prometheus"
        if exporter_config['endpoint'] && exporter_config['endpoint'].end_with?(port)
          puts("Prometheus exporter already exists: #{exporter_name}, port: #{port}")
          return
        else
          exporter_names.push(exporter_name)
        end
      end
    end
  end
  name = get_unique_exporter_name(exporter_names, name)

  # Add tls if configured
  tls = {}
  tls['ca_pem'] = p('prom_exporter_tls.ca_pem') unless p('prom_exporter_tls.ca_pem').nil? || p('prom_exporter_tls.ca_pem').empty?
  tls['cert_pem'] = p('prom_exporter_tls.cert_pem') unless p('prom_exporter_tls.cert_pem').nil? || p('prom_exporter_tls.cert_pem').empty?
  tls['key_pem'] = p('prom_exporter_tls.key_pem') unless p('prom_exporter_tls.key_pem').nil? || p('prom_exporter_tls.key_pem').empty?

  if tls.size == 3
    content['tls'] = tls
  end

  # Add the new prometheus exporter
  config['exporters'] ||= {}
  config['exporters'][name] = content

  # Add the new prometheus exporter to the metrics pipeline
  config['service'] ||= {}
  config['service']['pipelines'] ||= {}
  config['service']['pipelines']['metrics'] ||= {}
  config['service']['pipelines']['metrics']['exporters'] ||= []
  config['service']['pipelines']['metrics']['exporters'].push(name)
end

# If the exporter name already exists, append a suffix to the name
def get_unique_exporter_name(exporter_names, name)
  if exporter_names.include?(name)
    puts("Exporter name #{name} already exists, appending suffix")
    name = name + "_1"
    return get_unique_exporter_name(exporter_names, name)
  end
  name
end

check_for_new_and_old_properties!
if !p('prom_exporter_config').empty?
  set_default_prom_exporter!
end
check_for_no_exporters!
check_for_no_service_config!
check_for_use_of_reserved_prefix!
check_for_use_of_reserved_bbs_api_port!
check_for_use_of_valid_components!('processors', included_processors)
check_for_use_of_valid_components!('exporters', included_exporters)
check_for_use_of_valid_components!('extensions', included_extensions)
if_p('allow_list.processors') do |prop|
  check_for_use_of_allowed_components!('processors', included_processors, prop)
end
if_p('allow_list.exporters') do |prop|
  check_for_use_of_allowed_components!('exporters', included_exporters, prop)
end
if_p('allow_list.extensions') do |prop|
  check_for_use_of_allowed_components!('extensions', included_extensions, prop)
end
set_internal_receiver_as_only_receiver
add_nop_pipelines
set_internal_receiver_on_all_pipelines
expose_internal_telemetry

YAML.dump(config)
%>
